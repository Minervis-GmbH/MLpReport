<?php

/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see https://github.com/ILIAS-eLearning/ILIAS/tree/trunk/docs/LICENSE */

require_once __DIR__ . "/../vendor/autoload.php";

require_once "./Services/Tracking/classes/repository_statistics/class.ilLPListOfObjectsGUI.php";

use srag\Plugins\SrCrsLpReport\Utils\SrCrsLpReportTrait;
use srag\DIC\SrCrsLpReport\DICTrait;

/**
 * Class ilSrCrsLpReportUIHookGUI
 *
 * Generated by srag\PluginGenerator v0.9.10
 *
 * @author studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 * @author studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 */
class ilSrCrsLpReportUIHookGUI extends ilUIHookPluginGUI {

	use DICTrait;
	use SrCrsLpReportTrait;
	const PLUGIN_CLASS_NAME = ilSrCrsLpReportPlugin::class;

	const PAR_TABS = "tabs";
	const MAIN_TEMPLATE_ID = "tpl.main.html";
	const MAIN_MENU_TEMPLATE_ID = "Services/MainMenu/tpl.main_menu.html";
	const STARTUP_SCREEN_TEMPLATE_ID = "Services/Init/tpl.startup_screen.html";
	const TEMPLATE_ADD = "template_add";
	const TEMPLATE_GET = "template_get";
	const TEMPLATE_SHOW = "template_show";
	const LP_CONFIG_TAB_LOADER = "rep_config_tab";
	/*const TILE_CONTAINER_LOADER = "tile_container";
	const TILE_FAVORITES_LOADER = "tile_desktop_loader";
	const TILE_RECOMMEND_MODAL = "tile_recommend_modal";*/
	const TEMPLATE_ID_CONTAINER_PAGE = "Services/Container/tpl.container_page.html";
	const TEMPLATE_ID_FAVORITES = "Services/PersonalDesktop/tpl.pd_list_block.html";
	const GET = 'template_get';
	const TAB_ID = "lp_config";
	const ADMIN_FOOTER_TPL_ID = "tpl.adm_content.html";
	/**
	 * @var bool[]
	 */
	protected static $load = [
		self::LP_CONFIG_TAB_LOADER => false,
	];


	/**
	 * ilSrCrsLpReportUIHookGUI constructor
	 */
	public function __construct() {

	}


	/**
	 * @param string $a_comp
	 * @param string $a_part
	 * @param array  $a_par
	 *
	 * @return array
	 */
	public function getHTML(/*string*/
		$a_comp, /*string*/
		$a_part, /*array*/
		$a_par = []): array {
		/*self::dic()->ctrl()->getLinkTargetByClass([
			ilUIPluginRouterGUI::class,
			SrCrsLpReportGUI::class
		], SrCrsLpReportGUI::CMD_SOME);*/

		// TODO: Implement getHTML

		global $ilLog;
		$ilLog->write(print_r($a_part,true));

		return [ "mode" => self::KEEP, "html" => "" ];
	}

	/**
	 * @param string $a_comp
	 * @param string $a_part
	 * @param array  $a_par
	 *
	 * @return array
	 */
	public function modifyGUI(/*string*/
		$a_comp, /*string*/
		$a_part, /*array*/
		$a_par = []): array {


		if ($a_part === self::PAR_TABS) {
			if ($_GET['ref_id'] > 0 and ilObject::_lookupType($_GET['ref_id'],true) == "crs") {
				//if(self::dic()->tabs()->getActiveTab() == 'view_content') {
				//	self::dic()->ctrl()->redirectByClass("illplistofobjectsgui");
				//}

				if (self::dic()->tabs()->getActiveTab() == 'learning_progress') {

					//self::dic()->ctrl()->setCmdClass(strtolower('illplistofobjectsgui'));

					self::dic()->ctrl()->setParameterByClass('SrCrsLpReportGUI', "details_id", $_GET['details_id']);

					self::dic()->ctrl()->setParameterByClass('SrCrsLpReportGUI', "ref_id", $_GET['ref_id']);
					self::dic()->ctrl()->redirectByClass(array('ilUIPluginRouterGUI','SrCrsLpReportGUI'));

				

					//return [ "mode" => self::REPLACE, "html" => $table_gui->getHTML() ];
					//}

					//$this->storeProperty("selfilters", serialize($this->selected_filter));

					//self::dic()->mainTemplate()->addCss(self::plugin()->directory() . "/css/srcrsreport.css");
				}
			}


			//if (!self::$load[self::LP_CONFIG_TAB_LOADER]) {
			if ($a_part === self::PAR_TABS) {
				self::$load[self::LP_CONFIG_TAB_LOADER] = true;

				//TODO user
				//Don't Display Personal Learning Progress for Reporting User
				if (self::dic()->tabs()->getActiveTab() == 'trac_progress') {
					self::dic()->ctrl()->redirectByClass("illplistofobjectsgui");
				}

				if (self::dic()->tabs()->getActiveTab() == 'trac_objects') {
					self::dic()->tabs()->removeTab('trac_progress');
				}
			}


		}
		return [ "mode" => self::KEEP, "html" => "" ];
		//}
	}








		/*if (!self::$load[self::LP_CONFIG_TAB_LOADER]) {

			$obj_ref_id = self::tiles()->filterRefId();

			if ($this->matchObjectBaseClass()
				&& $a_part === self::PAR_TABS
				&& self::tiles()->isObject($obj_ref_id)) {

				self::$load[self::LP_CONFIG_TAB_LOADER] = true;

				if (!self::access()->hasWriteAccess($obj_ref_id)) {
					return [ "mode" => self::KEEP, "html" => "" ];
				}

				self::dic()->ctrl()->saveParameterByClass(SrTileGUI::class, SrTileGUI::GET_PARAM_OBJ_REF_ID);

				self::dic()->tabs()->addTab(self::TAB_ID, self::plugin()->translate(self::TAB_ID), self::dic()->ctrl()->getLinkTargetByClass([
					ilUIPluginRouterGUI::class,
					SrCrsLpReportGUI::class
				], SrCrsLpReportGUI::CMD_EDIT));

				self::dic()->tabs()->target[count(self::dic()->tabs()->target) - 1]['cmd'] = [];
			}
		}*/

		//return [ "mode" => self::KEEP, "html" => "" ];
	//}

	/**
	 * @return bool
	 */
	protected function matchObjectBaseClass(): bool {
		$baseClass = strtolower(filter_input(INPUT_GET, 'baseClass'));

		return ($baseClass === strtolower(ilRepositoryGUI::class) || $baseClass === strtolower(ilObjPluginDispatchGUI::class)
			|| $baseClass === strtolower(ilSAHSEditGUI::class)
			|| empty($baseClass));
	}


}
